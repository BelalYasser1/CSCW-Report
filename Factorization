import time
import math

def extended_gcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        gcd, x, y = extended_gcd(b % a, a)
        return (gcd, y - (b // a) * x, x)

def mod_inv(a, m):
    gcd, x, _ = extended_gcd(a, m)
    if gcd != 1:
        raise ValueError('Modular inverse does not exist')
    else:
        return x % m

def factorize(n):
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return i, n // i
    return None, None

def generate_keys():
    p, q = factorize(n)
    phi = (p - 1) * (q - 1)
    d = mod_inv(e, phi)
    return (p, q, d)

# Input for N and E
n = int(input("Enter N: "))
e = int(input("Enter E: "))

# Calculate private key (D) using extended gcd
start_time = time.time()
p, q, d = generate_keys()
end_time = time.time()
print("P:", p)
print("Q:", q)
print("D:", d)
print("Key generation time (ms):", (end_time - start_time) * 1000)
