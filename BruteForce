import math
import time
from PrimeGenarator import generate_prime


def BruteForce_Decrypt(C, n, e, text):
    
    trials = 0
    d = 2  
    while True:
        M = pow(C, d, n)
        if M == text:
         break
        d += 1
        trials += 1
    return d, trials

def mod_in(a, m):
    m0, x0, y0 = m, 0, 1
    x1, x2 = 1, 0
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1, x0 - q * x1
        y0, x2 = x2, y0 - q * x2
    return x0 if x0 >= 0 else x0 + m0



def G_C_D(a,c):
  
    while c:
        a, c = c, a % c
    return a

p = generate_prime(8)
q = generate_prime(8)

while p == q:
    q = generate_prime(8)

n = p * q
_phi = (p - 1) * (q - 1)
e = 65537
text = 112

start_time = time.time()
d, trials = BruteForce_Decrypt(pow(text, e, n), n, e, text)
end_time = time.time()

d = d % _phi


print("The private exponent is ", d)
print("The number of trials is ", trials)
print("The time taken is ", (end_time - start_time) * 1000, "milliseconds")
